#pragma once
#include "OD/Defines.h"
#include "Asset.h"
#include "OD/Graphics/Mesh.h"
#include "OD/Graphics/Model.h"
#include "OD/Graphics/Shader.h"
#include "OD/Graphics/ShaderHandler.h"
#include "OD/Graphics/Texture.h"
#include "OD/Graphics/Material.h"
#include <typeinfo>
#include <typeindex>

namespace OD{

class OD_API AssetTypesDB{
public:
    struct AssetFuncs{
        std::function<Ref<Asset>(const std::string&)> CreateFromFile;
    };

    template<typename T>
    void RegisterAssetType(std::string fileExtension){
        Assert(assetFuncs.find(fileExtension) == assetFuncs.end());

        AssetFuncs funcs;

        funcs.CreateFromFile = [](const char* path){
            return T::CreateFromFile(path);
        };
        
        assetFuncs[fileExtension] = funcs;
    }

    template<typename T>
    void RegisterAssetType(std::string fileExtension, std::function<Ref<Asset>(const std::string&)> createFromFile){
        Assert(assetFuncs.find(fileExtension) == assetFuncs.end());

        AssetFuncs funcs;
        funcs.CreateFromFile = createFromFile;
        assetFuncs[fileExtension] = funcs;
    }

    inline bool HasAssetByExtension(std::string fileExtension){
        return assetFuncs.find(fileExtension) != assetFuncs.end();
    }

    inline static AssetTypesDB& Get(){
        static AssetTypesDB global;
        return global;
    }

    std::unordered_map<std::string, AssetFuncs> assetFuncs;

private:
    AssetTypesDB(){}
};

class OD_API AssetManager{
public:
    Ref<Texture2D> LoadDefautlTexture2D();
    Ref<Shader> LoadErrorShader();

    template<class T>
    Ref<T> LoadAsset(const std::string& path){
        auto& db = data[std::type_index(typeid(T))];
        //if(db.count(path)) return reinterpret_cast<const Ref<T>&>(db[path]);
        if(db.count(path)) return std::static_pointer_cast<T>(db[path]);

        LogInfo("LoadAsset: %s", path.c_str());

        Ref<T> d = CreateRef<T>();
        d->LoadFromFile(path);
        db[path] = d;
        
        //return reinterpret_cast<const Ref<T>&>(d);
        return std::static_pointer_cast<T>(d);
    }

    inline void UnloadAll(){
        meshs.clear();
        models.clear();
        shaders.clear();
        textures.clear();
        materials.clear();
        data.clear();
    }

    static AssetManager& Get();

private:
    std::unordered_map<std::string, Ref<Mesh>> meshs;
    std::unordered_map<std::string, Ref<Model>> models;
    std::unordered_map<std::string, Ref<Shader>> shaders;
    std::unordered_map<std::string, Ref<Texture2D>> textures;
    std::unordered_map<std::string, Ref<Material>> materials;
    std::unordered_map<std::type_index, std::unordered_map<std::string, Ref<Asset>>> data;
};

}